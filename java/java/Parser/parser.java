
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;
import Compiler.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\010\000\002\010" +
    "\005\000\002\010\002\000\002\004\004\000\002\004\002" +
    "\000\002\003\004\000\002\003\005\000\002\005\004\000" +
    "\002\007\003\000\002\007\005\000\002\006\011\000\002" +
    "\011\005\000\002\011\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\005" +
    "\000\002\014\007\000\002\014\011\000\002\015\007\000" +
    "\002\016\012\000\002\017\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\004\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\004\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\017\004\001\002\000\004\045\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\016\ufffe\022\ufffe\035\011\001\002\000\006\016" +
    "\ufffc\022\017\001\002\000\004\045\013\001\002\000\004" +
    "\036\016\001\002\000\010\026\ufff8\036\ufff8\040\014\001" +
    "\002\000\004\045\013\001\002\000\006\026\ufff7\036\ufff7" +
    "\001\002\000\006\016\uffff\022\uffff\001\002\000\004\050" +
    "\155\001\002\000\004\016\022\001\002\000\012\004\117" +
    "\010\114\011\116\045\115\001\002\000\004\035\023\001" +
    "\002\000\034\013\036\020\026\021\040\023\035\024\027" +
    "\025\033\035\032\041\025\042\034\044\031\045\024\046" +
    "\041\047\037\001\002\000\036\005\uffe3\012\uffe3\014\uffe3" +
    "\015\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002\000\034" +
    "\013\036\020\026\021\040\023\035\024\027\025\033\035" +
    "\032\041\025\042\034\044\031\045\024\046\041\047\037" +
    "\001\002\000\004\035\107\001\002\000\004\035\104\001" +
    "\002\000\026\014\044\015\054\030\047\031\050\032\051" +
    "\033\052\034\046\037\055\040\100\041\045\001\002\000" +
    "\036\005\uffea\012\uffea\014\uffea\015\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\001\002\000\034\013\036\020\026\021\040" +
    "\023\035\024\027\025\033\035\032\041\025\042\034\044" +
    "\031\045\024\046\041\047\037\001\002\000\004\035\073" +
    "\001\002\000\036\005\uffe0\012\uffe0\014\uffe0\015\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\001\002\000\004\035\070\001" +
    "\002\000\034\013\036\020\026\021\040\023\035\024\027" +
    "\025\033\035\032\041\025\042\034\044\031\045\024\046" +
    "\041\047\037\001\002\000\036\005\uffdf\012\uffdf\014\uffdf" +
    "\015\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002\000\004" +
    "\035\042\001\002\000\036\005\uffe2\012\uffe2\014\uffe2\015" +
    "\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000\034\013" +
    "\036\020\026\021\040\023\035\024\027\025\033\035\032" +
    "\041\025\042\034\044\031\045\024\046\041\047\037\001" +
    "\002\000\026\014\044\015\054\030\047\031\050\032\051" +
    "\033\052\034\046\036\053\037\055\041\045\001\002\000" +
    "\034\013\036\020\026\021\040\023\035\024\027\025\033" +
    "\035\032\041\025\042\034\044\031\045\024\046\041\047" +
    "\037\001\002\000\034\013\036\020\026\021\040\023\035" +
    "\024\027\025\033\035\032\041\025\042\034\044\031\045" +
    "\024\046\041\047\037\001\002\000\034\013\036\020\026" +
    "\021\040\023\035\024\027\025\033\035\032\041\025\042" +
    "\034\044\031\045\024\046\041\047\037\001\002\000\034" +
    "\013\036\020\026\021\040\023\035\024\027\025\033\035" +
    "\032\041\025\042\034\044\031\045\024\046\041\047\037" +
    "\001\002\000\034\013\036\020\026\021\040\023\035\024" +
    "\027\025\033\035\032\041\025\042\034\044\031\045\024" +
    "\046\041\047\037\001\002\000\034\013\036\020\026\021" +
    "\040\023\035\024\027\025\033\035\032\041\025\042\034" +
    "\044\031\045\024\046\041\047\037\001\002\000\034\013" +
    "\036\020\026\021\040\023\035\024\027\025\033\035\032" +
    "\041\025\042\034\044\031\045\024\046\041\047\037\001" +
    "\002\000\036\005\uffd9\012\uffd9\014\uffd9\015\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\001\002\000\034\013\036\020\026" +
    "\021\040\023\035\024\027\025\033\035\032\041\025\042" +
    "\034\044\031\045\024\046\041\047\037\001\002\000\034" +
    "\013\036\020\026\021\040\023\035\024\027\025\033\035" +
    "\032\041\025\042\034\044\031\045\024\046\041\047\037" +
    "\001\002\000\036\005\uffe6\012\uffe6\014\uffe6\015\uffe6\026" +
    "\uffe6\030\047\031\050\032\051\033\052\034\046\036\uffe6" +
    "\037\055\040\uffe6\041\045\001\002\000\036\005\uffe8\012" +
    "\uffe8\014\044\015\uffe8\026\uffe8\030\047\031\050\032\051" +
    "\033\052\034\046\036\uffe8\037\055\040\uffe8\041\045\001" +
    "\002\000\036\005\uffdb\012\uffdb\014\uffdb\015\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\001\002\000\036\005\uffde\012\uffde" +
    "\014\uffde\015\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\052\034\046\036\uffde\037\uffde\040\uffde\041\045\001\002" +
    "\000\036\005\uffe5\012\uffe5\014\uffe5\015\uffe5\026\uffe5\030" +
    "\047\031\050\032\051\033\052\034\046\036\uffe5\037\uffe5" +
    "\040\uffe5\041\045\001\002\000\036\005\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\026\uffe4\030\047\031\uffe4\032\051\033\052" +
    "\034\046\036\uffe4\037\uffe4\040\uffe4\041\045\001\002\000" +
    "\036\005\uffdc\012\uffdc\014\uffdc\015\uffdc\026\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\052\034\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\001\002\000\036\005\uffdd\012\uffdd\014\uffdd" +
    "\015\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033\052\034" +
    "\046\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001\002\000\036" +
    "\005\uffe9\012\uffe9\014\uffe9\015\uffe9\026\uffe9\030\047\031" +
    "\050\032\051\033\052\034\046\036\uffe9\037\055\040\uffe9" +
    "\041\045\001\002\000\036\005\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\026\uffe7\030\047\031\050\032\051\033\052\034\046" +
    "\036\uffe7\037\055\040\uffe7\041\045\001\002\000\034\013" +
    "\036\020\026\021\040\023\035\024\027\025\033\035\032" +
    "\041\025\042\034\044\031\045\024\046\041\047\037\001" +
    "\002\000\026\014\044\015\054\030\047\031\050\032\051" +
    "\033\052\034\046\036\072\037\055\041\045\001\002\000" +
    "\036\005\uffd7\012\uffd7\014\uffd7\015\uffd7\026\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\001\002\000\034\013\036\020\026\021\040" +
    "\023\035\024\027\025\033\035\032\041\025\042\034\044" +
    "\031\045\024\046\041\047\037\001\002\000\026\014\044" +
    "\015\054\030\047\031\050\032\051\033\052\034\046\036" +
    "\075\037\055\041\045\001\002\000\036\005\uffd5\012\uffd5" +
    "\014\uffd5\015\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002" +
    "\000\026\014\044\015\054\030\047\031\050\032\051\033" +
    "\052\034\046\036\077\037\055\041\045\001\002\000\036" +
    "\005\uffe1\012\uffe1\014\uffe1\015\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\001\002\000\034\013\036\020\026\021\040\023" +
    "\035\024\027\025\033\035\032\041\025\042\034\044\031" +
    "\045\024\046\041\047\037\001\002\000\026\014\044\015" +
    "\054\030\047\031\050\032\051\033\052\034\046\036\102" +
    "\037\055\041\045\001\002\000\004\026\103\001\002\000" +
    "\012\004\ufff6\010\ufff6\011\ufff6\045\ufff6\001\002\000\034" +
    "\013\036\020\026\021\040\023\035\024\027\025\033\035" +
    "\032\041\025\042\034\044\031\045\024\046\041\047\037" +
    "\001\002\000\026\014\044\015\054\030\047\031\050\032" +
    "\051\033\052\034\046\036\106\037\055\041\045\001\002" +
    "\000\036\005\uffd6\012\uffd6\014\uffd6\015\uffd6\026\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\001\002\000\034\013\036\020\026\021" +
    "\040\023\035\024\027\025\033\035\032\041\025\042\034" +
    "\044\031\045\024\046\041\047\037\001\002\000\026\014" +
    "\044\015\054\030\047\031\050\032\051\033\052\034\046" +
    "\036\111\037\055\041\045\001\002\000\036\005\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001" +
    "\002\000\036\005\uffda\012\uffda\014\uffda\015\uffda\026\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\052\034\046\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\001\002\000\004\026\ufff2\001\002" +
    "\000\034\013\036\020\026\021\040\023\035\024\027\025" +
    "\033\035\032\041\025\042\034\044\031\045\024\046\041" +
    "\047\037\001\002\000\004\027\145\001\002\000\004\035" +
    "\136\001\002\000\034\013\036\020\026\021\040\023\035" +
    "\024\027\025\033\035\032\041\025\042\034\044\031\045" +
    "\024\046\041\047\037\001\002\000\004\026\ufff3\001\002" +
    "\000\004\026\ufff1\001\002\000\004\026\125\001\002\000" +
    "\004\026\ufff0\001\002\000\004\002\000\001\002\000\020" +
    "\002\ufff4\004\117\006\ufff4\007\ufff4\010\114\011\116\045" +
    "\115\001\002\000\010\002\ufff5\006\ufff5\007\ufff5\001\002" +
    "\000\026\005\130\014\044\015\054\030\047\031\050\032" +
    "\051\033\052\034\046\037\055\041\045\001\002\000\012" +
    "\004\117\010\114\011\116\045\115\001\002\000\006\006" +
    "\132\007\133\001\002\000\012\004\117\010\114\011\116" +
    "\045\115\001\002\000\004\026\uffee\001\002\000\004\007" +
    "\135\001\002\000\004\026\uffed\001\002\000\004\043\137" +
    "\001\002\000\004\040\140\001\002\000\034\013\036\020" +
    "\026\021\040\023\035\024\027\025\033\035\032\041\025" +
    "\042\034\044\031\045\024\046\041\047\037\001\002\000" +
    "\026\014\044\015\054\030\047\031\050\032\051\033\052" +
    "\034\046\037\055\040\142\041\045\001\002\000\034\013" +
    "\036\020\026\021\040\023\035\024\027\025\033\035\032" +
    "\041\025\042\034\044\031\045\024\046\041\047\037\001" +
    "\002\000\026\014\044\015\054\030\047\031\050\032\051" +
    "\033\052\034\046\036\144\037\055\041\045\001\002\000" +
    "\004\026\uffeb\001\002\000\034\013\036\020\026\021\040" +
    "\023\035\024\027\025\033\035\032\041\025\042\034\044" +
    "\031\045\024\046\041\047\037\001\002\000\026\014\044" +
    "\015\054\026\uffef\030\047\031\050\032\051\033\052\034" +
    "\046\037\055\041\045\001\002\000\026\012\150\014\044" +
    "\015\054\030\047\031\050\032\051\033\052\034\046\037" +
    "\055\041\045\001\002\000\012\004\117\010\114\011\116" +
    "\045\115\001\002\000\004\007\152\001\002\000\004\026" +
    "\uffec\001\002\000\004\016\ufffd\001\002\000\004\026\157" +
    "\001\002\000\004\045\013\001\002\000\004\026\ufff9\001" +
    "\002\000\006\016\ufffb\050\155\001\002\000\004\016\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\007\001\001" +
    "\000\004\004\017\001\001\000\004\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\152\005" +
    "\153\001\001\000\004\006\020\001\001\000\016\011\123" +
    "\012\121\013\117\014\112\015\120\016\122\001\001\000" +
    "\002\001\001\000\004\017\027\001\001\000\002\001\001" +
    "\000\004\017\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\042\001\001\000" +
    "\002\001\001\000\004\017\065\001\001\000\004\017\064" +
    "\001\001\000\004\017\063\001\001\000\004\017\062\001" +
    "\001\000\004\017\061\001\001\000\004\017\060\001\001" +
    "\000\004\017\057\001\001\000\002\001\001\000\004\017" +
    "\056\001\001\000\004\017\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\125\012\121\013\117\014\112\015\120\016\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\130\012" +
    "\121\013\117\014\112\015\120\016\122\001\001\000\002" +
    "\001\001\000\016\011\133\012\121\013\117\014\112\015" +
    "\120\016\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\140\001\001\000\002\001\001\000\004\017\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\150\012\121\013\117\014\112\015\120\016\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\155\001\001\000\002\001" +
    "\001\000\006\003\157\005\153\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis en linea " + s.left, null);
	  }
	  
	  public void unrecovered_syntax_error(Symbol s) throws
		java.lang.Exception {
		report_fatal_error("", null);
	  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= PROG IDENT Inp Vars Size Sent 
            {
              Prog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Inp inp = (Inp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Size size = (Size)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Prog1(id, inp, vars, size, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inp ::= PAREN LVar TESIS 
            {
              Inp RESULT =null;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Inp1(lvar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inp ::= 
            {
              Inp RESULT =null;
		RESULT = new Inp2(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Vars ::= VARS VDef 
            {
              Vars RESULT =null;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VDef vdef = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Vars1(vdef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Vars ::= 
            {
              Vars RESULT =null;
		RESULT = new Vars2(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VDef ::= Decl PC 
            {
              VDef RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VDef1(decl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VDef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VDef ::= Decl PC VDef 
            {
              VDef RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VDef vdef = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VDef2(decl, vdef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VDef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= TIPO LVar 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Decl1(type, lvar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVar ::= IDENT 
            {
              LVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LVar1(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LVar ::= IDENT COMA LVar 
            {
              LVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LVar2(id, lvar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Size ::= SIZE PAREN Exp COMA Exp TESIS PC 
            {
              Size RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Size1(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Size",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sent ::= SentSimp PC Sent 
            {
              Sent RESULT =null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SentSimp sentsimp = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Sent1(sentsimp, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sent",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sent ::= SentSimp PC 
            {
              Sent RESULT =null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentSimp sentsimp = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Sent2(sentsimp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sent",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentSimp ::= Asign 
            {
              SentSimp RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asign asign = (Asign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentSimp1(asign); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentSimp ::= Cond 
            {
              SentSimp RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cond cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentSimp2(cond); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SentSimp ::= Repet 
            {
              SentSimp RESULT =null;
		int repetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int repetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Repet repet = (Repet)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentSimp3(repet); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SentSimp ::= Plot 
            {
              SentSimp RESULT =null;
		int plotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Plot plot = (Plot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentSimp4(plot); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Asign ::= IDENT ASOP Exp 
            {
              Asign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asign1(id, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cond ::= IF Exp THEN Sent END 
            {
              Cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Cond1(exp, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Cond ::= IF Exp THEN Sent ELSE Sent END 
            {
              Cond RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sent sent1 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent sent2 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Cond2(exp, sent1, sent2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Repet ::= WHILE Exp DO Sent END 
            {
              Repet RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Repet1(exp, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Repet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Plot ::= PLOT PAREN COLOR COMA Exp COMA Exp TESIS 
            {
              Plot RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer col = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Plot1(exp1, exp2, col); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Plot",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= CLOG 
            {
              Exp RESULT =null;
		int clogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean clog = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpConstBool(clog); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= Exp AND Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpAnd(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= Exp OR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpOr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpNot(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp IGUALQUE Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpIgualQue(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp MAYORQUE Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpMayorQue(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp MENORQUE Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpMenorQue(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= IDENT 
            {
              Exp RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpIdent(i1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= PI 
            {
              Exp RESULT =null;
		RESULT=new ExpPi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new ExpParent(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= CENT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpConsInt(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= CREAL 
            {
              Exp RESULT =null;
		int crealleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crealright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double creal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpConstReal(creal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpMas(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpMenos(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp POR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpPor(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpDiv(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= MENOS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ExpOpuesto(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= REAL2INT PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExpReal2Int(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= INT2REAL PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExpInt2Real(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= SENO PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExpSeno(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= COSENO PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExpCoseno(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= EXPONENCIAL PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exponencial(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
